package day35.ScrumTask;import java.util.ArrayList;import java.util.Arrays;public class Scrum {    private String PO, BA, SM;    ArrayList<Tester> testers;    ArrayList<Developer> developers;    public Scrum(String PO, String BA, String SM) {        setPO(PO);        setBA(BA);        setSM(SM);        testers = new ArrayList<>();// ArrayList' Object has to be created to use the ArrayList        developers = new ArrayList<>();    }    public String getPO() {        return PO;    }    public void setPO(String PO) {        this.PO = PO;    }    public String getBA() {        return BA;    }    public void setBA(String BA) {        this.BA = BA;    }    public String getSM() {        return SM;    }    public void setSM(String SM) {        this.SM = SM;    }    // Not generating getters for tester/developers arrayList because they should only be set when tester/developer is added/removed    public ArrayList<Tester> getTesters() {        return testers;    }    public ArrayList<Developer> getDevelopers() {        return developers;    }    public void hireTester(Tester tester) {        testers.add(tester);    }    public void hireTesters(Tester[] testers) {        this.testers.addAll(Arrays.asList(testers));    }    public void removeTester(int ID) {        testers.removeIf(p -> p.getEmployeeID() == ID);    }    public void hireDeveloper(Developer developer) {        developers.add(developer);    }    public void hireDevelopers(Developer[] developers) {        this.developers.addAll(Arrays.asList(developers));    }    public void removeDeveloper(int ID) {        developers.removeIf(p -> p.getEmployeeID() == ID);    }    public String toString() {        return "MyScrumTeam{" +                "PO='" + PO + '\'' +                ", BA='" + BA + '\'' +                ", SM='" + SM + '\'' +                ", number of testers=" + testers.size() +                ", number of developers=" + developers.size() +                '}';    }}/*4. ScrumTeam Task:    re-do the Scrum task by making all the fields private in each custom classes    Encapsulate all the field        (salary cannot be set to negative)        (employeeId cannot be set to negative or zero)    Avoid any duplicated code fragments in each class*//*Scrum Task:	create a class called ScrumTeam	           Attributes:	                String PO, BA, SM;	                ArrayList<Tester> testersList = new ArrayList<>();	                ArrayList<Developer> devopsList = new ArrayList<>();	                int daysOfSprint;	               Add A constructor that can set the fileds PO, BA, and SM	             Actions:	                  addTester(Tester tester): adds the given tester to the testers ArrayList	                  addTesters(Tester[] testers): adds the given testers to the testers ArrayList	                  addDeveloper(Developer developer): adds the given developer to the developers ArrayList	                  addDevelopers(Developer[] developers): adds the given developers to the developers ArrayList	                  removeTester(long employeeID): removes the given tester from the testers ArrayList	                  removeDeveloper(long employeeID): removes the developer from the developers ArrayList	                  toString(): prints number of tester,& developers,  PO name, SM name, BA name	create a class called MyScrumTeam:	                    1. create an array of Testers and add the testers from your group	                    2. create an array of developers add the developers from your group	                    3. create an object of ScrumTeam and store the testers & developers above to the scrum team*/